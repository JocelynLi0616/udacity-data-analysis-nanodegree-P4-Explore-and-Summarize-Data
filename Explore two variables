data(diamonds)
summary(diamonds)

# Your first task is to create a scatterplot of price vs x.using the ggplot syntax.
library(ggplot2)
ggplot(aes(x=price,y=x),data=diamonds)+geom_point()

#What is the correlation between price and x?
cor.test(diamonds$price,diamonds$x,method = 'pearson')

#What is the correlation between price and y?
cor.test(diamonds$price,diamonds$y,method = 'pearson')

#What is the correlation between price and z?
cor.test(diamonds$price,diamonds$z,method = 'pearson')

# Create a simple scatter plot of price vs depth.
ggplot(aes(x=depth,y=price),data = diamonds)+geom_point()

# Change the code to make the transparency of the points to be 1/100 of what they are now and mark the x-axis every 2 units.
ggplot(aes(x=depth,y=price),data = diamonds)+geom_point(alpha=1/100)+scale_x_continuous(breaks=seq(43,79,2))

#Correlation between depth and price
cor.test(diamonds$price,diamonds$depth,method = 'pearson')

# Create a scatterplot of price vs carat and omit the top 1% of price and carat values.
ggplot(aes(x=carat,y=price),data = diamonds)+
  geom_point()+
  xlim(0,quantile(diamonds$carat,0.99))+
  ylim(0,quantile(diamonds$price,0.99))

# Create a scatterplot of price vs. volume (x * y * z) This is a very rough approximation for a diamond's volume.
# Create a new variable for volume in the diamonds data frame.

diamonds$volume<-diamonds$x*diamonds$y*diamonds$z

ggplot(aes(x=volume,y=price),data = diamonds)+geom_point()

#What is the correlation of price and volume? Exclude the diamonds that have a volume of 0 or greater than or equal to 800.
with(subset(diamonds,(0<volume)&(volume<=800)),cor.test(volume,price,method = 'pearson'))

#subset the data to exclude diamonds with a volume greater than or equal to 800. Also, exclude diamonds with a volume of 0.
#Adjust the transparency of the points and add a linear model to the plot. 

diamonds2<-subset(diamonds,volume<=800)

ggplot(aes(x=volume,y=price),data = diamonds2)+geom_point(alpha=1/100)+geom_smooth(method='lm',color='red')

# Use the function dplyr package
# to create a new data frame containing
# info on diamonds by clarity.

# Name the data frame diamondsByClarity

# The data frame should contain the following
# variables in this order.

#       (1) mean_price
#       (2) median_price
#       (3) min_price
#       (4) max_price
#       (5) n

library(dplyr)
diamonds_by_clarity<-group_by(diamonds,clarity)

diamondsByClarity<-summarise(clarity_groups,
                             mean_price=mean(price),
                             median_price=median(price),
                             min_price=min(price),
                             max_price=max(price),
                             n=n())
#Your task is to write additional code to create two bar plots on one output image using the 
#grid.arrange() function from the package gridExtra.

library(gridExtra)

diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))

diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))

library(ggplot2)

p1<-ggplot(aes(x=factor(clarity),y=mean_price),data=diamonds_mp_by_clarity)+geom_bar(stat="identity")
p2<-ggplot(aes(x=factor(color),y=mean_price),data=diamonds_mp_by_color)+geom_bar(stat="identity")

grid.arrange(p1,p2)






